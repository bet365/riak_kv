%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.21.1 on {{2016,6,3},{12,27,55}}
-module(riak_core_pb).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2]).
-export([merge_msgs/2]).
-export([verify_msg/1]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("riak_core_pb.hrl").



encode_msg(Msg) -> encode_msg(Msg, []).


encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg);
      false -> ok
    end,
    case Msg of
      #riakobject_pb{} -> e_msg_riakobject_pb(Msg)
    end.


e_msg_riakobject_pb(Msg) ->
    e_msg_riakobject_pb(Msg, <<>>).


e_msg_riakobject_pb(#riakobject_pb{bucket = F1,
				   key = F2, val = F3},
		    Bin) ->
    B1 = e_type_bytes(F1, <<Bin/binary, 10>>),
    B2 = e_type_bytes(F2, <<B1/binary, 18>>),
    e_type_bytes(F3, <<B2/binary, 26>>).



e_type_bytes(Bytes, Bin) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    case MsgName of
      riakobject_pb -> d_msg_riakobject_pb(Bin)
    end.



d_msg_riakobject_pb(Bin) ->
    dfp_read_field_def_riakobject_pb(Bin, 0, 0,
				     id(undefined), id(undefined),
				     id(undefined)).

dfp_read_field_def_riakobject_pb(<<10, Rest/binary>>,
				 Z1, Z2, F1, F2, F3) ->
    d_field_riakobject_pb_bucket(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_riakobject_pb(<<18, Rest/binary>>,
				 Z1, Z2, F1, F2, F3) ->
    d_field_riakobject_pb_key(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_riakobject_pb(<<26, Rest/binary>>,
				 Z1, Z2, F1, F2, F3) ->
    d_field_riakobject_pb_val(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_riakobject_pb(<<>>, 0, 0, F1, F2,
				 F3) ->
    #riakobject_pb{bucket = F1, key = F2, val = F3};
dfp_read_field_def_riakobject_pb(Other, Z1, Z2, F1, F2,
				 F3) ->
    dg_read_field_def_riakobject_pb(Other, Z1, Z2, F1, F2,
				    F3).

dg_read_field_def_riakobject_pb(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    dg_read_field_def_riakobject_pb(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3);
dg_read_field_def_riakobject_pb(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_riakobject_pb_bucket(Rest, 0, 0, F1, F2, F3);
      18 -> d_field_riakobject_pb_key(Rest, 0, 0, F1, F2, F3);
      26 -> d_field_riakobject_pb_val(Rest, 0, 0, F1, F2, F3);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_riakobject_pb(Rest, 0, 0, F1, F2, F3);
	    1 -> skip_64_riakobject_pb(Rest, 0, 0, F1, F2, F3);
	    2 ->
		skip_length_delimited_riakobject_pb(Rest, 0, 0, F1, F2,
						    F3);
	    5 -> skip_32_riakobject_pb(Rest, 0, 0, F1, F2, F3)
	  end
    end;
dg_read_field_def_riakobject_pb(<<>>, 0, 0, F1, F2,
				F3) ->
    #riakobject_pb{bucket = F1, key = F2, val = F3}.

d_field_riakobject_pb_bucket(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_riakobject_pb_bucket(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3);
d_field_riakobject_pb_bucket(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_riakobject_pb(Rest2, 0, 0, NewFValue,
				     F2, F3).


d_field_riakobject_pb_key(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3)
    when N < 57 ->
    d_field_riakobject_pb_key(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3);
d_field_riakobject_pb_key(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, _, F3) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_riakobject_pb(Rest2, 0, 0, F1,
				     NewFValue, F3).


d_field_riakobject_pb_val(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3)
    when N < 57 ->
    d_field_riakobject_pb_val(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3);
d_field_riakobject_pb_val(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, _) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_riakobject_pb(Rest2, 0, 0, F1, F2,
				     NewFValue).


skip_varint_riakobject_pb(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3) ->
    skip_varint_riakobject_pb(Rest, Z1, Z2, F1, F2, F3);
skip_varint_riakobject_pb(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3) ->
    dfp_read_field_def_riakobject_pb(Rest, Z1, Z2, F1, F2,
				     F3).


skip_length_delimited_riakobject_pb(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3)
    when N < 57 ->
    skip_length_delimited_riakobject_pb(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3);
skip_length_delimited_riakobject_pb(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_riakobject_pb(Rest2, 0, 0, F1, F2,
				     F3).


skip_32_riakobject_pb(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      F2, F3) ->
    dfp_read_field_def_riakobject_pb(Rest, Z1, Z2, F1, F2,
				     F3).


skip_64_riakobject_pb(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      F2, F3) ->
    dfp_read_field_def_riakobject_pb(Rest, Z1, Z2, F1, F2,
				     F3).






merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    case Prev of
      #riakobject_pb{} -> merge_msg_riakobject_pb(Prev, New)
    end.

merge_msg_riakobject_pb(#riakobject_pb{bucket =
					   PFbucket,
				       key = PFkey, val = PFval},
			#riakobject_pb{bucket = NFbucket, key = NFkey,
				       val = NFval}) ->
    #riakobject_pb{bucket =
		       if NFbucket =:= undefined -> PFbucket;
			  true -> NFbucket
		       end,
		   key =
		       if NFkey =:= undefined -> PFkey;
			  true -> NFkey
		       end,
		   val =
		       if NFval =:= undefined -> PFval;
			  true -> NFval
		       end}.



verify_msg(Msg) ->
    case Msg of
      #riakobject_pb{} ->
	  v_msg_riakobject_pb(Msg, [riakobject_pb]);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


v_msg_riakobject_pb(#riakobject_pb{bucket = F1,
				   key = F2, val = F3},
		    Path) ->
    v_type_bytes(F1, [bucket | Path]),
    v_type_bytes(F2, [key | Path]),
    v_type_bytes(F3, [val | Path]),
    ok.

v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({nowarn_unused_function,id/1}).
-compile({inline,id/1}).
id(X) -> X.

-compile({nowarn_unused_function,cons/2}).
-compile({inline,cons/2}).
cons(Elem, Acc) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/1}).
-compile({inline,lists_reverse/1}).
'lists_reverse'(L) -> lists:reverse(L).

-compile({nowarn_unused_function,'erlang_++'/2}).
-compile({inline,'erlang_++'/2}).
'erlang_++'(A, B) -> A ++ B.



get_msg_defs() ->
    [{{msg, riakobject_pb},
      [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, key}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, val}, {fnum, 3}, {rnum, 4}, {type, bytes},
	{occurrence, required}, {opts, []}]]}].


get_msg_names() -> [riakobject_pb].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(riakobject_pb) ->
    [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, key}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, val}, {fnum, 3}, {rnum, 4}, {type, bytes},
      {occurrence, required}, {opts, []}]];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "3.21.1".

gpb_version_as_list() ->
    [3,21,1].
